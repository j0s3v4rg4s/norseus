---
globs: *.html
alwaysApply: false
---
# UI Components Rules for Cursor

## Purpose
These rules define the standard UI components and patterns that Cursor should use when generating HTML templates for this Angular project. The primary goal is to maintain consistency across the application by using predefined, reusable components that follow the project's design system and Tailwind CSS v4 styling approach.

## Priority Guidelines
- **Primary**: Always use the custom UI components described in these rules as the first option
- **Secondary**: If no specific component exists for the use case, use standard HTML elements with Tailwind CSS classes
- **Fallback**: Only use other UI libraries or custom SCSS when the above options are insufficient

## Component Categories
The following sections will define specific UI components organized by their purpose and functionality. Each component will include:
- Usage scenarios
- Required properties/attributes
- Styling guidelines
- Accessibility considerations

## General Styling Principles
- Use Tailwind CSS v4 classes as the primary styling approach
- Follow the project's color scheme and design tokens
- Ensure responsive design for all components
- Maintain accessibility standards (ARIA labels, semantic HTML)
- Use consistent spacing and typography scales

## Input Component

### Description
Displays a form input field or a component that looks like an input field. The input component provides consistent styling and behavior across the application.

### Base Usage
Simply add the `input` class to your `<input>` element or have a parent with the `form` class. You can also set the `aria-invalid` attribute to `true` to make the input invalid.

### Basic Implementation
```html
<input class="input" type="email" placeholder="Email">
```

### Variants and Examples

#### 1. Default Input
```html
<input class="input" type="email" placeholder="Email">
```

#### 2. Invalid Input
Use `aria-invalid="true"` to indicate validation errors:
```html
<input class="input" type="email" placeholder="Email" aria-invalid="true">
```

#### 3. Disabled Input
```html
<input class="input" type="email" placeholder="Email" disabled>
```

#### 4. Input with Label
```html
<div class="grid gap-3">
  <label for="input-with-label" class="label">Label</label>
  <input class="input" id="input-with-label" type="email" placeholder="Email">
</div>
```

#### 5. Input with Helper Text
```html
<div class="grid gap-3">
  <label for="input-with-text" class="label">Label</label>
  <input class="input" id="input-with-text" type="email" placeholder="Email">
  <p class="text-muted-foreground text-sm">Fill in your email address.</p>
</div>
```

#### 6. Input with Button
```html
<div class="flex items-center space-x-2">
  <input class="input" type="email" placeholder="Email">
  <button type="submit" class="btn">Submit</button>
</div>
```

#### 7. Input in Form Context
```html
<form class="form space-y-6 w-full">
  <div class="grid gap-3">
    <label for="input-form" class="label">Username</label>
    <input class="input" id="input-form" type="text" placeholder="hunvreus">
    <p class="text-muted-foreground text-sm">This is your public display name.</p>
  </div>
  <button type="submit" class="btn">Submit</button>
</form>
```

### Usage Guidelines
- **Primary Class**: Always use `input` class for consistent styling
- **Form Integration**: Use within `form` class containers for proper spacing
- **Accessibility**: Include proper `id` and `for` attributes when using labels
- **Validation**: Use `aria-invalid="true"` for error states
- **Helper Text**: Use `text-muted-foreground text-sm` classes for descriptive text
- **Layout**: Use `grid gap-3` for vertical layouts and `flex items-center space-x-2` for horizontal layouts

### Accessibility Considerations
- Always associate labels with inputs using `for` and `id` attributes
- Use `aria-invalid` for validation states
- Ensure proper contrast ratios for text and placeholder text
- Provide meaningful placeholder text
- Use semantic HTML structure

### Responsive Behavior
- Inputs should be full-width within their containers
- Use appropriate max-width constraints when needed (`max-w-sm`, `max-w-md`, etc.)
- Maintain consistent spacing across different screen sizes

## Button Component

### Description
Displays a button or a component that looks like a button. The button component provides consistent styling and behavior across the application with multiple variants and sizes.

### Base Usage
You can use one of the `btn` classes to style any element as a button. The button system supports multiple variants and sizes that can be combined.

### Basic Implementation
```html
<button class="btn">Button</button>
```

### Variants

#### 1. Primary Button (Default)
```html
<button class="btn">Primary</button>
```

#### 2. Secondary Button
```html
<button class="btn-secondary">Button</button>
```

#### 3. Destructive Button
```html
<button class="btn-destructive">Destructive</button>
```

#### 4. Outline Button
```html
<button class="btn-outline">Outline</button>
```

#### 5. Ghost Button
```html
<button class="btn-ghost">Ghost</button>
```

#### 6. Link Button
```html
<button class="btn-link">Link</button>
```

#### 7. Icon Button
```html
<button class="btn-icon-outline">
  <svg><!-- icon content --></svg>
</button>
```

### Sizes

#### 1. Small Button
```html
<button class="btn-sm-icon-destructive">
  <svg><!-- icon content --></svg>
</button>
```

#### 2. Large Button
```html
<button class="btn-lg">
  <svg><!-- icon content --></svg>
  Buy
</button>
```

### Advanced Examples

#### 1. Button with Icon
```html
<button class="btn">
  <svg><!-- send icon --></svg>
  Send email
</button>
```

#### 2. Loading Button
```html
<button class="btn-outline" disabled>
  <svg class="animate-spin"><!-- loader icon --></svg>
  Loading
</button>
```

#### 3. Combined Variants
You can combine sizes with any variant:
```html
<button class="btn-lg-destructive">Large Destructive</button>
<button class="btn-sm-icon-outline">
  <svg><!-- icon content --></svg>
</button>
```

### Class Combinations Reference

#### Variants
- `btn` or `btn-primary` - Primary buttons
- `btn-secondary` - Secondary buttons
- `btn-destructive` - Destructive buttons
- `btn-outline` - Outline buttons
- `btn-ghost` - Ghost buttons
- `btn-link` - Link buttons
- `btn-icon` - Icon buttons (can be combined with other variants)

#### Sizes
- `btn-sm` - Small buttons
- `btn-lg` - Large buttons
- Default size (no size class needed)

#### Combination Examples
- `btn-lg-destructive` - Large destructive button
- `btn-sm-icon-outline` - Small icon outline button
- `btn-icon-destructive` - Icon destructive button

### Usage Guidelines
- **Primary Actions**: Use `btn` or `btn-primary` for main actions
- **Secondary Actions**: Use `btn-secondary` for less important actions
- **Destructive Actions**: Use `btn-destructive` for delete/remove actions
- **Icon Buttons**: Use `btn-icon` variants for buttons with only icons
- **Loading States**: Add `disabled` attribute and loading icon for async operations
- **Size Selection**: Use `btn-sm` for compact spaces, `btn-lg` for prominent actions

### Accessibility Considerations
- Always provide meaningful text content or aria-labels for icon buttons
- Use `disabled` attribute for loading states
- Ensure proper contrast ratios for all button variants
- Use semantic button elements (`<button>`, `<input type="button">`)
- Provide focus indicators for keyboard navigation

### Responsive Behavior
- Buttons should maintain their intended size across screen sizes
- Icon buttons should remain accessible on mobile devices
- Text buttons should have sufficient touch targets (minimum 44px)
- Consider button stacking on small screens for complex layouts

## Select Component

### Description
Displays a list of options for the user to pick from‚Äîtriggered by a button. The select component is implemented as an Angular standalone component that provides enhanced functionality with automatic form integration and accessibility features.

### Component Import and Module Setup

#### Import Components
```typescript
import { SelectModule } from '@libs/front/ui/src/form/select';
```

```typescript
@Component({
  selector: 'app-example',
  imports: [SelectModule], // Import directly in standalone components
  template: `...`
})
export class ExampleComponent {
  // Component logic
}
```

### Basic Implementation

#### 1. Simple Select
```html
<ui-select placeholder="Select an option">
  <ui-option value="apple">Apple</ui-option>
  <ui-option value="banana">Banana</ui-option>
  <ui-option value="cherry">Cherry</ui-option>
</ui-select>
```

#### 2. Select with Placeholder
```html
<ui-select placeholder="Choose a fruit">
  <ui-option value="apple">üçé Apple</ui-option>
  <ui-option value="banana">üçå Banana</ui-option>
  <ui-option value="orange">üçä Orange</ui-option>
</ui-select>
```

### Form Integration

#### Reactive Forms
```typescript
import { FormControl, FormBuilder } from '@angular/forms';

@Component({
  template: `
    <form [formGroup]="form">
      <ui-select formControlName="selectedFruit" placeholder="Select a fruit">
        <ui-option value="apple">Apple</ui-option>
        <ui-option value="banana">Banana</ui-option>
        <ui-option value="cherry">Cherry</ui-option>
      </ui-select>
    </form>
  `
})
export class FormExampleComponent {
  form = this.fb.group({
    selectedFruit: [''] // Default value
  });

  constructor(private fb: FormBuilder) {}
}
```

#### Template-driven Forms
```html
<form #form="ngForm">
  <ui-select
    name="fruit"
    [(ngModel)]="selectedValue"
    placeholder="Select a fruit">
    <ui-option value="apple">Apple</ui-option>
    <ui-option value="banana">Banana</ui-option>
    <ui-option value="cherry">Cherry</ui-option>
  </ui-select>
</form>
```

### Component Inputs

#### ui-select Component
- **`placeholder`** (string): Placeholder text displayed when no option is selected
  ```html
  <ui-select placeholder="Choose an option">
    <!-- options -->
  </ui-select>
  ```

#### ui-option Component
- **`value`** (T, required): The value associated with the option (can be any type)
- **`prefix`** (string): Optional prefix for unique ID generation
  ```html
  <ui-option value="custom-value" prefix="example">Option Text</ui-option>
  ```

### Advanced Examples

#### 1. With Complex Values
```typescript
interface User {
  id: number;
  name: string;
  email: string;
}

@Component({
  template: `
    <ui-select placeholder="Select a user" [(ngModel)]="selectedUser">
      <ui-option *ngFor="let user of users" [value]="user">
        {{ user.name }} ({{ user.email }})
      </ui-option>
    </ui-select>
  `
})
export class UserSelectComponent {
  selectedUser: User | null = null;
  users: User[] = [
    { id: 1, name: 'John Doe', email: 'john@example.com' },
    { id: 2, name: 'Jane Smith', email: 'jane@example.com' }
  ];
}
```

#### 2. Form Validation
```typescript
@Component({
  template: `
    <form [formGroup]="form">
      <div class="grid gap-3">
        <label for="fruit-select" class="label">Choose a fruit *</label>
        <ui-select formControlName="fruit" placeholder="Select a fruit">
          <ui-option value="apple">Apple</ui-option>
          <ui-option value="banana">Banana</ui-option>
          <ui-option value="cherry">Cherry</ui-option>
        </ui-select>
        @if (form.get('fruit')?.invalid && form.get('fruit')?.touched) {
          <p class="text-red-500 text-sm">Please select a fruit</p>
        }
      </div>
    </form>
  `
})
export class ValidatedSelectComponent {
  form = this.fb.group({
    fruit: ['', Validators.required]
  });

  constructor(private fb: FormBuilder) {}
}
```

### Component Features

#### Built-in Functionality
- **Form Integration**: Implements `ControlValueAccessor` for seamless Angular form integration
- **Accessibility**: Full ARIA support with proper roles, labels, and keyboard navigation
- **Automatic Positioning**: Popover automatically positions above or below based on viewport space
- **Touch Support**: Handles both mouse and touch interactions
- **Validation Support**: Integrates with Angular form validation and displays error states

#### Internal Implementation Details
- Uses basecoat-css JavaScript library for enhanced select behavior
- Generates unique IDs automatically to prevent conflicts
- Manages popover state and positioning dynamically
- Handles click outside to close functionality
- Supports disabled state management

### Usage Guidelines
- **Import Required**: Always import `SelectModule` when using the select
- **Placeholder**: Placeholder is optional, but if provided, it will be displayed when no option is selected
- **Value Types**: The `value` input on `ui-option` can accept any type (string, number, object, etc.)
- **Form Integration**: Works seamlessly with both reactive and template-driven forms
- **Content Projection**: Option content supports rich HTML including icons, badges, and complex layouts
- **Accessibility**: Component handles all ARIA attributes and keyboard navigation automatically

### Styling and Layout
- **Full Width**: Component uses `w-full` by default, constrain with parent container as needed
- **Button Styling**: Trigger button uses `btn-outline` class with justified content layout
- **Icon**: Includes Material Symbols `unfold_more` icon by default
- **Error States**: Automatically applies error styling when form validation fails
- **Responsive**: Adapts popover positioning based on available viewport space

### Accessibility Features
- Full ARIA compliance with proper roles and attributes
- Keyboard navigation support (arrow keys, enter, escape)
- Screen reader compatible with meaningful announcements
- Focus management and visual indicators
- Automatic unique ID generation for proper label association

### Browser Support
- Uses modern basecoat-css library for enhanced functionality
- Popover API support for native browser popover behavior
- Graceful degradation for older browsers


