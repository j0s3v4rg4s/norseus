---
description: UI componentes for use on user interfaces like first option over native html components
globs:
alwaysApply: false
---
# Pikka UI Library (@p1kka/ui) Usage Guide for AI Agent

This document provides guidance for the AI agent on how to utilize the components defined within the `@p1kka/ui` library.

**Primary Directive:**

When generating or modifying Angular code within the Pikka project, **always prioritize using components from the `@p1kka/ui` library** whenever a suitable component exists. This ensures consistency in the user interface, adherence to design standards, and leverages pre-built, reusable functionality.

**Identifying Components:**

Components are organized logically within the library. Refer to the examples below for common components and their import paths.

**Import Strategy:**

Import components directly from their specific entry points for better code splitting and clarity. Avoid importing everything from the root `@p1kka/ui` unless necessary.

*   **Forms:** `@p1kka/ui/src/forms`
*   **Actions:** `@p1kka/ui/src/actions`
*   **Feedback:** `@p1kka/ui/src/feedback`
*   **Core:** `@p1kka/ui/src/core`

**General Usage Pattern:**

Most components in this library are standalone. Import them from their specific entry point into the `imports` array of the consuming component. Use the component's selector (usually prefixed with `pk-`) in the template and bind to its `input()` and `output()` signals as needed.

```typescript
// Example: Using ButtonComponent in another component
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
// Import from the 'actions' entry point
import { ButtonComponent } from '@p1kka/ui/src/actions';

@Component({
  selector: 'app-my-feature',
  standalone: true,
  imports: [CommonModule, ButtonComponent], // Import the standalone component
  template: `
    <h2>Feature Action</h2>
    <button pk-button class="pk-btn-primary" (click)="performAction()">Perform Action</button>
    // Use the component's selector and classes
  `,
})
export class MyFeatureComponent {
  performAction(): void {
    console.log('Action performed!');
  }
}
```

**Available Components & Examples:**

Here are some key components and basic usage examples:

1.  **Button (`pk-button`)**
    *   Import: `import { ButtonComponent } from '@p1kka/ui/src/actions';`
    *   Description: Standard button with variants, colors, and loading/disabled states.
    *   Example:
        ```html
        <!-- Flat primary button -->
        <button pk-button variant="flat" class="pk-btn-primary">Submit</button>

        <!-- Outline secondary button -->
        <button pk-button variant="outline" class="pk-btn-secondary">Cancel</button>

        <!-- Disabled button -->
        <button pk-button [disabled]="true">Cannot Click</button>

        <!-- Loading button -->
        <button pk-button [loading]="isLoading">Processing...</button>
        ```

2.  **Navigation Item (`pk-nav-item`)**
    *   Import: `import { NavItemComponent } from '@p1kka/ui/src/actions';`
    *   Description: Used for sidebar or menu navigation links.
    *   Example:
        ```html
        <pk-nav-item
          label="Dashboard"
          icon="dashboard"
          route="/dashboard"
          [isActive]="true">
        </pk-nav-item>
        <pk-nav-item
          label="Settings"
          icon="settings"
          route="/settings">
        </pk-nav-item>
        ```

3.  **Spinner (`pk-spinner`)**
    *   Import: `import { SpinnerComponent } from '@p1kka/ui/src/feedback';`
    *   Description: Displays a loading indicator. Size and color are customizable.
    *   Example:
        ```html
        <!-- Default spinner -->
        <pk-spinner></pk-spinner>

        <!-- Small spinner -->
        <pk-spinner [size]="24"></pk-spinner>

        <!-- Large spinner with custom color -->
        <pk-spinner [size]="64" style="--pk-spinner-color: var(--pk-primary-500);"></pk-spinner>
        ```

4.  **Form Field (`pk-form-field`) & Input (`pkInput`)**
    *   Import: `import { FormFieldComponent } from '@p1kka/ui/src/forms';`, `import { InputDirective } from '@p1kka/ui/src/forms';`
    *   Description: Wrapper for form controls providing label and consistent styling. Use `pkInput` directive on standard `<input>` or `<textarea>`.
    *   Example:
        ```html
        <pk-form-field label="Username">
          <input pkInput placeholder="Enter your username">
        </pk-form-field>

        <pk-form-field label="Comments">
          <textarea pkInput rows="3" placeholder="Enter comments"></textarea>
        </pk-form-field>
        ```

5.  **Select (`pk-select`) & Option (`pk-option`)**
    *   Import: `import { SelectComponent, OptionComponent } from '@p1kka/ui/src/forms';`
    *   Description: Dropdown selection component. Used within `pk-form-field`.
    *   Example:
        ```html
        <pk-form-field label="Choose Role">
          <pk-select placeholder="Select a role">
            <pk-option value="admin">Administrator</pk-option>
            <pk-option value="editor">Editor</pk-option>
            <pk-option value="viewer">Viewer</pk-option>
          </pk-select>
        </pk-form-field>
        ```

**Customizable CSS Variables:**

The library exposes ONLY the following CSS custom properties (variables) defined globally (on `:root`) that you can override in your application's global stylesheet to customize the default appearance of components. Only these variables are guaranteed to be stable for customization.

**Button (`pk-button`)**

*   `--pk-btn-bg`: `black` (Default background. Theme classes like `pk-btn-primary` override this.)
*   `--pk-btn-color`: `white` (Default text color. Theme classes override this.)
*   `--pk-btn-ripple-color`: `color-mix(in srgb, var(--pk-btn-color) 50%, transparent)`
*   `--pk-btn-disabled-bg`: `#A6A7A4`
*   `--pk-btn-disabled-color`: `white`
*   `--pk-btn-font-size`: `1rem`
*   `--pk-btn-padding-x`: `12px`
*   `--pk-btn-padding-y`: `8px`
*   `--pk-btn-border-radius`: `12px`
*   `--pk-btn-height`: `40px`
*   `--pk-btn-shadow`: `0px 0px 12px rgba(0, 0, 0, 0.12)`

**Spinner (`pk-spinner`)**

*   `--pk-spinner-color`: `#272725`
*   `--pk-spinner-animation-duration`: `1s`

**Form Field (`pk-form-field`)**

*   `--pk-form-field-min-height`: `40px`
*   `--pk-form-field-min-width`: `230px`
*   `--pk-form-field-default-border-color`: `#7C7D7A`
*   `--pk-form-field-focus-border-color`: `var(--pk-primary-500)` (Uses theme color)
*   `--pk-form-field-filled-border-color`: `var(--pk-secondary-500)` (Uses theme color)
*   `--pk-form-field-error-border-color`: `var(--pk-error-500)` (Uses theme color)

**Option (`pk-option` in `pk-select`)**

*   `--pk--option-hover-color`: `#eeeeee`
*   `--pk--option-active-color`: `#dddddd`
*   `--pk--option-selected-color`: `#cccccc`

**Input (`pkInput` directive)**

*   `--pk-input-placeholder-color`: `#a5a4a4`

**Theme & Font (Base Defaults & Generated Variables)**

*   `--pk-font-family`: `'Montserrat', sans-serif` (Default font)

    *   **Generated Theme Variables:** The library generates the following CSS variables based on the theme colors provided during initialization. Their specific values depend on the theme configuration, but the variable names are fixed:
        *   **Primary:** `--pk-primary-50`, `--pk-primary-100`, `--pk-primary-200`, `--pk-primary-300`, `--pk-primary-400`, `--pk-primary-500` (base), `--pk-primary-600`, `--pk-primary-700`, `--pk-primary-800`, `--pk-primary-900`, and `--pk-primary-contrast`.
        *   **Secondary:** `--pk-secondary-50`, `--pk-secondary-100`, ... (up to 900), and `--pk-secondary-contrast`.
        *   **Tertiary:** `--pk-tertiary-50`, `--pk-tertiary-100`, ... (up to 900), and `--pk-tertiary-contrast`.
        *   **Error:** `--pk-error-50`, `--pk-error-100`, ... (up to 900), and `--pk-error-contrast`.
    *   *Note:* While you *can* override these generated theme variables, it's generally recommended to customize the theme via the library's initialization process if possible, or focus on overriding the component-specific variables listed earlier.

By consistently using `@p1kka/ui` components with the correct import paths, you contribute to a more maintainable, scalable, and visually coherent application.
